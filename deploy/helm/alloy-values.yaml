alloy:
  extraEnv:
    - name: PROMETHEUS_URL
      value: "http://prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
    - name: LOKI_URL
      value: "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
  configMap:
    content: |-
      discovery.kubernetes "k8s_pods" {
        role = "pod"
      }

      // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
      // If no rules are defined, then the input targets are exported as-is.
      discovery.relabel "pod" {
        targets = discovery.kubernetes.k8s_pods.targets

        // Label creation - "namespace" field from "__meta_kubernetes_namespace"
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          action = "replace"
          target_label = "namespace"
        }

        // Label creation - "pod" field from "__meta_kubernetes_pod_name"
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          action = "replace"
          target_label = "pod"
        }

        // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "container"
        }

        // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
          action = "replace"
          target_label = "app"
        }

        // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
        // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
        rule {
          source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "job"
          separator = "/"
          replacement = "$1"
        }

        // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
        // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "__path__"
          separator = "/"
          replacement = "/var/log/pods/*$1/*.log"
        }

        // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
        rule {
          source_labels = ["__meta_kubernetes_pod_container_id"]
          action = "replace"
          target_label = "container_runtime"
          regex = "^(\\S+):\\/\\/.+$"
          replacement = "$1"
        }
      }

      import.git "k8s" {
        repository     = "https://github.com/grafana/alloy-modules"
        path           = "modules/kubernetes/core"
        revision       = "v0.2.5"
        pull_frequency = "0s"
      }

      k8s.cadvisor "scrape" {
        forward_to = [prometheus.remote_write.local.receiver]
        scrape_interval = "15s"
      }

      import.git "ksm" {
        repository     = "https://github.com/grafana/alloy-modules"
        path           = "modules/kubernetes/kube-state-metrics"
        revision       = "v0.2.5"
        pull_frequency = "0s"
      }

      ksm.kubernetes "targets" { }

      ksm.scrape "metrics" {
        targets      = ksm.kubernetes.targets.output
        forward_to   = [prometheus.remote_write.local.receiver]
        keep_metrics = ".*"
        scrape_interval = "15s"
      }

      prometheus.scrape "pods" {
        targets    = discovery.relabel.pod.output
        forward_to = [prometheus.remote_write.local.receiver]
        scrape_interval = "15s"
      }

      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.pod.output
        forward_to = [loki.write.local.receiver]
      }

      prometheus.remote_write "local" {
        endpoint {
          url = sys.env("PROMETHEUS_URL")
          send_exemplars = false
          remote_timeout = "60s"
        }
      }

      loki.write "local" {
        endpoint {
          url = sys.env("LOKI_URL")
        }
      }

    