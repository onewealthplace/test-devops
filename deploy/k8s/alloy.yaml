---
# Source: alloy/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: alloy
  namespace: monitoring
  labels:
    helm.sh/chart: alloy-1.1.1
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: alloy
    app.kubernetes.io/version: "v1.9.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: rbac
---
# Source: alloy/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy
  namespace: monitoring
  labels:
    helm.sh/chart: alloy-1.1.1
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: alloy
    app.kubernetes.io/version: "v1.9.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: config
data:
  config.alloy: |-
    discovery.kubernetes "k8s_pods" {
      role = "pod"
    }
    
    // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
    // If no rules are defined, then the input targets are exported as-is.
    discovery.relabel "pod" {
      targets = discovery.kubernetes.k8s_pods.targets
    
      // Label creation - "namespace" field from "__meta_kubernetes_namespace"
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }
    
      // Label creation - "pod" field from "__meta_kubernetes_pod_name"
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }
    
      // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }
    
      // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        action = "replace"
        target_label = "app"
      }
    
      // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
      // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "job"
        separator = "/"
        replacement = "$1"
      }
    
      // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
      // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "__path__"
        separator = "/"
        replacement = "/var/log/pods/*$1/*.log"
      }
    
      // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
      rule {
        source_labels = ["__meta_kubernetes_pod_container_id"]
        action = "replace"
        target_label = "container_runtime"
        regex = "^(\\S+):\\/\\/.+$"
        replacement = "$1"
      }
    }
    
    import.git "k8s" {
      repository     = "https://github.com/grafana/alloy-modules"
      path           = "modules/kubernetes/core"
      revision       = "v0.2.5"
      pull_frequency = "0s"
    }
    
    k8s.cadvisor "scrape" {
      forward_to = [prometheus.remote_write.local.receiver]
      scrape_interval = "15s"
    }
    
    import.git "ksm" {
      repository     = "https://github.com/grafana/alloy-modules"
      path           = "modules/kubernetes/kube-state-metrics"
      revision       = "v0.2.5"
      pull_frequency = "0s"
    }
    
    ksm.kubernetes "targets" { }
    
    ksm.scrape "metrics" {
      targets      = ksm.kubernetes.targets.output
      forward_to   = [prometheus.remote_write.local.receiver]
      keep_metrics = ".*"
      scrape_interval = "15s"
    }
    
    prometheus.scrape "pods" {
      targets    = discovery.relabel.pod.output
      forward_to = [prometheus.remote_write.local.receiver]
      scrape_interval = "15s"
    }
    
    loki.source.kubernetes "pods" {
      targets    = discovery.relabel.pod.output
      forward_to = [loki.write.local.receiver]
    }
    
    prometheus.remote_write "local" {
      endpoint {
        url = sys.env("PROMETHEUS_URL")
        send_exemplars = false
        remote_timeout = "60s"
      }
    }
    
    loki.write "local" {
      endpoint {
        url = sys.env("LOKI_URL")
      }
    }
---
# Source: alloy/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: alloy
  labels:
    helm.sh/chart: alloy-1.1.1
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: alloy
    app.kubernetes.io/version: "v1.9.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: rbac
rules:
  # Rules which allow discovery.kubernetes to function.
  - apiGroups:
      - ""
      - "discovery.k8s.io"
      - "networking.k8s.io"
    resources:
      - endpoints
      - endpointslices
      - ingresses
      - nodes
      - nodes/proxy
      - nodes/metrics
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  # Rules which allow loki.source.kubernetes and loki.source.podlogs to work.
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "monitoring.grafana.com"
    resources:
      - podlogs
    verbs:
      - get
      - list
      - watch
  # Rules which allow mimir.rules.kubernetes to work.
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  # Rules for prometheus.kubernetes.*
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - podmonitors
      - servicemonitors
      - probes
      - scrapeconfigs
    verbs:
      - get
      - list
      - watch
  # Rules which allow eventhandler to work.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
  # needed for remote.kubernetes.*
  - apiGroups: [""]
    resources:
      - "configmaps"
      - "secrets"
    verbs:
      - get
      - list
      - watch
  # needed for otelcol.processor.k8sattributes
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
---
# Source: alloy/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: alloy
  labels:
    helm.sh/chart: alloy-1.1.1
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: alloy
    app.kubernetes.io/version: "v1.9.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: alloy
subjects:
  - kind: ServiceAccount
    name: alloy
    namespace: monitoring
---
# Source: alloy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: alloy
  namespace: monitoring
  labels:
    helm.sh/chart: alloy-1.1.1
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: alloy
    app.kubernetes.io/version: "v1.9.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: networking
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: alloy
  internalTrafficPolicy: Cluster
  ports:
    - name: http-metrics
      port: 12345
      targetPort: 12345
      protocol: "TCP"
---
# Source: alloy/templates/controllers/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: alloy
  namespace: monitoring
  labels:
    helm.sh/chart: alloy-1.1.1
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: alloy
    app.kubernetes.io/version: "v1.9.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
spec:
  minReadySeconds: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: alloy
      app.kubernetes.io/instance: alloy
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: alloy
        checksum/config: d31830f101cf0b72453e5806b7828372990ba1ae0a62791a64855079adef722
      labels:
        app.kubernetes.io/name: alloy
        app.kubernetes.io/instance: alloy
    spec:
      serviceAccountName: alloy
      containers:
        - name: alloy
          image: docker.io/grafana/alloy:v1.9.1
          imagePullPolicy: IfNotPresent
          args:
            - run
            - /etc/alloy/config.alloy
            - --storage.path=/tmp/alloy
            - --server.http.listen-addr=0.0.0.0:12345
            - --server.http.ui-path-prefix=/
            - --stability.level=generally-available
          env:
            - name: ALLOY_DEPLOY_MODE
              value: "helm"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            -
              name: PROMETHEUS_URL
              value: http://prometheus.monitoring.svc.cluster.local:9090/api/v1/write
            -
              name: LOKI_URL
              value: http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push
          ports:
            - containerPort: 12345
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 12345
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/alloy
        - name: config-reloader
          image: quay.io/prometheus-operator/prometheus-config-reloader:v0.81.0
          args:
            - --watched-dir=/etc/alloy
            - --reload-url=http://localhost:12345/-/reload
          volumeMounts:
            - name: config
              mountPath: /etc/alloy
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
      dnsPolicy: ClusterFirst
      volumes:
        - name: config
          configMap:
            name: alloy
